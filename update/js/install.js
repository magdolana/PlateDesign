// Generated by CoffeeScript 1.6.3

var     
        admzip,      // It's a module used to decompress and compress your file.      input:npm install adm-zip
        http,        // http protocol  for 
        https,       // https protocol for normal use
        fs,        
        path,
        request,    //  It's a module used to support client-side http library support.
        ProgressBar, // It's a module used to support everything we need for ProgressBar
        execFile,        
        exec,
        gui,            //For node nw.exe
        win,            //For node nw.exe
        DEBUG_MODE,     //DEGUG_MODE won't be use for now.
        DEV_MODE,           //Need to activate DEV_MODE
        secretString,       //No idea what's this used for.
        serverAddress,          
        protocol,
        applicationExecutable,
        ds,
        platform,
        platformArch,
        pathfrags,
        __APPDIR,        
        len,
        index,
        _i,
        _len,
        frag,
        __PARENTDIR,
        __HEDWIGDIR,    //__HEDWIGDIR    
        __EXTRACTDIR,
        __DOWNLOADDIR,
        infoFile,
        updateDir,
        version,
                
        checkUpdate,
        downloadUpdate,
        extractError,
        extractUpdate,
        restartApp,
        run,
        showError,
        
        __indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length;i < l; i++){
                if (i in this && this[i] === item)
                    return i;
            }
            return -1;
        },
        _this = this;

admzip = require('adm-zip');
http = require('http');
https = require('https');
fs = require('fs');
path = require('path');
request = require('superagent');
ProgressBar = require('progress');
execFile = require('child_process').execFile;
exec = require('child_process').exec;
gui = window.require('nw.gui');
win = gui.Window.get();

DEBUG_MODE = __indexOf.call(gui.App.argv, '--debug') >= 0 ? true : false;       
DEV_MODE = __indexOf.call(gui.App.argv, '--dev') >= 0 ? true : false;

DEV_MODE=true; //Activate DEV_MODE


//Communicate method with the server.
secretString = "A#^fTghJJOCJb^()^?><<$@15@aÅ#a$AA@tCfnRFÆThrtyjRYTj%7Ø6øæ6547kYHJ<Ly^&,y";



//serverAddress = "update.getcircadio.com";
serverAddress = "update.gethedwig.com";       
if (DEV_MODE) {
    
  //serverAddress = "localhost:3000";         //using test purpose.
  serverAddress="localhost:80";
  //serverAddress="demo.seadrip.com";
  
}
protocol = "https";                         //

if (DEV_MODE) {
  protocol = "http";
}
//applicationExecutable = "Circadio or name of your executable file."; 
applicationExecutable = "Hedwig";                         

if (process.platform.match(/^win/)) {                       //ds : / or \\  desh?
  ds = "\\";
} else {
  ds = "/";
}

if (process.platform.match(/^win/)) {                       //http://stackoverflow.com/questions/8683895/variable-to-detect-operating-system-in-node-scripts
  platform = 'win';                                         //plantform version.
  platformArch = 'win-ia32';                                //platform Archive can't understand how to use it.
} else if (process.platform.match(/^darwin/)) {             
  platform = 'osx';
  platformArch = 'osx-ia32';
} else if (process.platform.match(/^linux/)) {
  platform = 'linux';
  platformArch = 'linux-' + process.arch;
}

if (DEBUG_MODE || DEV_MODE) {                               //let nodejs show toolbar or not.
  //win.showDevTools();                                       //Activate it for develop purpose.
}

pathfrags = process.execPath.split(ds);                     //About path.
__APPDIR = '';                                              //Directy of the App.
len = pathfrags.length;                                     //path length.
for (index = _i = 0, _len = pathfrags.length; _i < _len; index = ++_i) {        //
  frag = pathfrags[index];                                  //
  if (index < len - 1) {                                    //
    __APPDIR += frag + ds;                                  //assemble frag+"\\" or "/" to   _APPDIR
  }
}
__PARENTDIR = path.join(__APPDIR, ".." + ds);                   //http://nodejs.org/api/path.html

if (platform === 'win' || platform === 'linux') {               //Get appdir
  __HEDWIGDIR = __PARENTDIR;
  __EXTRACTDIR = __PARENTDIR;
  __DOWNLOADDIR = __APPDIR;
  infoFile = path.join(__PARENTDIR, "VERSION");
  if (DEV_MODE) {                                                   //if 
    __EXTRACTDIR = path.join(__PARENTDIR, '..', 'test');
    __HEDWIGDIR = path.join(__PARENTDIR, '..', 'test');
    __DOWNLOADDIR = path.join(__PARENTDIR, '..', 'test');
  }
} else {
  updateDir = path.join(__APPDIR, '..', '..', '..', '..', '..');
  __EXTRACTDIR = path.join(updateDir, '..', '..', '..');
  __HEDWIGDIR = path.join(__EXTRACTDIR, '..');
  if (DEV_MODE) {
      //__EXTRACTDIR = path.join(updateDir, '..', '..', '..', 'test', 'Circadio.app');
    __EXTRACTDIR = path.join(updateDir, '..', '..', '..', 'test', 'Hedwig.app');
    __HEDWIGDIR = path.join(__EXTRACTDIR, '..');
  }
  infoFile = path.join(__EXTRACTDIR, 'Contents', 'Resources', "VERSION");
  __DOWNLOADDIR = path.join(__EXTRACTDIR, 'Contents', 'Resources', 'Updates');
  if (!fs.existsSync(__DOWNLOADDIR)) {          //http://nodejs.org/api/fs.html#fs_fs_existssync_path
    fs.mkdirSync(__DOWNLOADDIR);                //http://nodejs.org/api/fs.html#fs_fs_mkdirsync_path_mode
  }
}

//console.log(__DOWNLOADDIR);                         //in console show download dir
if (fs.existsSync(infoFile)) {                      //if file exist.
  version = fs.readFileSync(infoFile).toString();   //then get the version
} else {
  version = "0.0";                                //if can't find . let version become 0.0.0
}

console.log("Operation plantform:     ", platform);
console.log("Operation plantform arch:", platformArch);

console.log("__APPDIR:                ", __APPDIR);
console.log("updateDir path:          ", updateDir);
console.log("__PARENTDIR Path:        ", __PARENTDIR);
console.log("__HEDWIGDIR Path:        ", __HEDWIGDIR);
console.log("__EXTRACTDIR Path:       ", __EXTRACTDIR);
console.log("__DOWNLOADDIR Path:      ", __DOWNLOADDIR);
console.log("Infofile Path:           ", infoFile);


console.log("frag:", frag);//    nw.exe
console.log("ds:", ds);  //   \
console.log("You are currently on version:", version);




extractError = function(filepath) {
  $('.load-spinner').hide();
  $('.progress-bar').hide();
  showError("There was an error while extracting the update. \nMake sure you have sufficient write permissions, \nand that all instances of Circadio has been terminated. <a href=\"#\" class=\"retry-update\">Try again</a>.");
  return $('a.retry-update').click(function(e) {
    e.preventDefault();
    return extractUpdate(filepath);
  });
};

extractUpdate = function(filepath, err) {
  var msg;
  $('.load-spinner').show();                                                    //try to extract 
  $('.progress-bar').hide();                                                    
  if (err) {
    showError("Failed to download update, please try again later or contact support.");
  }
  if (err) {
    return console.log("Couldn't download update: ", err);
  }
  msg = "Extracting update";
  $('#description').text('');
  $('.update-text').text(msg);
  return setTimeout(function() {
    var zip;
    if (platform === 'osx') {
      return exec("unzip -o '" + filepath + "' -d '" + __EXTRACTDIR + "'", function(err, stdout, stderr) {
        if (err) {
          console.log(err, stdout, stderr);
          return extractError(filepath);
        } else {
          $('.update-text').text('Cleaning up');
          $('#description').text('Deleting downloaded update');
          fs.unlinkSync(filepath);
          $('#description').text('All done, restarting Circadio!');
          return restartApp();
        }
      });
    } else {
      zip = new admzip(filepath);
      try {
        zip.extractAllTo(__EXTRACTDIR, true);
      } catch (_error) {
        return extractError(filepath);
      }
      if (platform === 'linux') {
        fs.chmodSync(path.join(__HEDWIGDIR, applicationExecutable), '775');
      }
      $('.update-text').text('Cleaning up');
      $('#description').text('Deleting downloaded update..');
      fs.unlinkSync(filepath);
      $('#description').text('All done, restarting Hedwig!');
      return restartApp();
    }
  }, 220);
};

restartApp = function() {                                                           //Restart the App in Windows.
  if (platform === 'win') {                                                         //Windows version
    gui.Shell.openItem(path.join(__HEDWIGDIR, applicationExecutable + '.exe'));     //Open the App again.
  } else if (platform === 'osx') {                                                  //Mac version
    console.log('starting', path.join(__HEDWIGDIR, applicationExecutable + '.app'));//
    gui.Shell.openItem(path.join(__HEDWIGDIR, applicationExecutable + '.app'));     //Open the App again.
  } else {                                                                          //
    execFile(path.join(__HEDWIGDIR, applicationExecutable), [], {                   
      cwd: __HEDWIGDIR
    });
  }
  if ((DEBUG_MODE || DEV_MODE)) {                                                  //如果不是Dev 就 关闭窗口
    return gui.Window.get().close(true);
  }
};

showError = function(message) {
  $('.update-text').text("Failed to update");
  return $('#description').html(message);
};


downloadUpdate = function(download,callback) {
    var downloadPath;
    downloadPath = path.join(__DOWNLOADDIR, download.filename);
    return fs.open(downloadPath, 'w', function(err, destination) {
      var req;
      if (err) {
        console.log("could not open " + download.filename + " for downloading " + download.filename + ": " + err.message);
        //callback(null, err);
        return;
      }
      if (download.protocol === 'https') {
          
        req = https.request({
          hostname: download.host,
          port: download.port,
          path: download.path,
          method: 'GET'
        });
      } else {
          console.log("Inside downloadUpdate:",download.path);
        req = http.request({
          hostname: download.host,
          port: download.port,
          path: download.path,//we will figure out how to write a correct path later
          method: 'GET'
        });
      }
      req.on('error', function(err) {
        fs.closeSync(destination);
        console.error("failed to get " + download.filename + " from " + download.host + ": " + err.message);
        return callback(null, err);
      }); 
      
      req.on('response', function(res) {
        var totalDownloaded;
        len = parseInt(res.headers['content-length'], 10);
        totalDownloaded = 0;
        $('#description').text("Downloading " + download.filename + " 0%");
        res.on('data', function(chunk) {
          var e, percent;
          if (chunk.length) {
            totalDownloaded += chunk.length;
            percent = Math.round((totalDownloaded / len) * 100);
            $('.progress-bar .bar').css('width', percent + '%');
            $('#description').text("Downloading " + download.filename + " " + percent + "%");
            try {
              return fs.writeSync(destination, chunk, 0, chunk.length, null);
            } catch (_error) {
              e = _error;
              return showError("There was an error while downloading the update. Make sure you have sufficient write permissions.");
            }
          }
        });
        return res.on('end', function() {
          console.log();
          fs.closeSync(destination);
          return callback(downloadPath);
        });
      });
      return req.end();
    });
};

//http://visionmedia.github.io/superagent/
checkUpdate = function(callback) {
    var url,
    _this = this;
    //url = "" + protocol + "://" + serverAddress + "/check?v=" + version + "&p=" + platformArch;
    url = "" + protocol + "://" + serverAddress+"/serverEnd/package.json";
    //url = "" + protocol + "://" + serverAddress+"/ckdemo/package.json";
    
    //protocol=http
    //serverAddress="localhost:80";
    //return request.post(url).type('json').send({secret: secretString}).end(
    return request.get(url).end(
            function(err, res){
                console.log("Version on server",res.body.update.version);
                var toDownload=res.body.update;
                if(err!=null){
                    console.log(err);
                    return callback(null, err);
                }
                var verLocal=Number(version);
                var verRemoate=Number(toDownload.version);
                
                //if(verLocal<verRemoate){
                if(verLocal<verRemoate){
                    console.log("New version available! (v"+toDownload.version +")");
                    console.log("-------------------------------------------------");
                    return callback(toDownload);
                }
                else{
                    callback(false);
                    return console.log("There is no new version");
                }
            }
    );
};

run = function() {
    return checkUpdate(
            //checkUpdate 里面装了一个 function check Update 需要获得这个 function 的返回值作为参数
        function(download, err) {
            var msg;
            if (err ||!download) {
                msg = 'No updates available.. Exiting..';
                console.log(msg);
                showError(msg);
                $('.update-text').text("No updates available");
                if (err) {
                  console.log(err);
                }
                if (!(DEBUG_MODE || DEV_MODE)) {                                //only when it's not the debug or dev mode
                  //gui.Window.get().close(true);                                 //close the APP
                }
                return;
            }
            $('.load-spinner').hide();
            $('.progress-bar').show();
            $('.update-text').html("Downloading version " + download.version);
            
            return downloadUpdate(download,extractUpdate);
        }
    );
};

module.exports = run;

/*
checkUpdate = function(callback) {
    var url,
    _this = this;
    //Call check method. 
    //send version and plateformArch=win-ia32
    url = "" + protocol + "://" + serverAddress + "/check?v=" + version + "&p=" + platformArch;
    
    return request.post(url).type('json').send({secret: secretString}).end(
            function(err, res){
                var toDownload;
                if (err != null){
                    console.log(err);
                    return callback(null, err);
                }
                if ((res.body.result != null) && res.body.result === 'ok') {
                    console.log(res.body.update);
                    toDownload = res.body.update;
                    toDownload.cookie = res.header['set-cookie'];
                    console.log("New version available! (v" + toDownload.version + ")");
                    console.log();
                    return callback(toDownload);
                }
                else {
                    allback(false);
                    return console.log(res);
                }
            }
    );
};
 */

/*

 */